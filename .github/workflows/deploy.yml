on:
    workflow_call:
        inputs:
            environment:
                required: true
                type: string
                description: The environment to deploy to
            host:
                required: true
                type: string
            service_name:
                required: true
                type: string
            url:
                required: true
                type: string
            version:
                required: true
                type: string
            newrelic_application_id:
                required: false
                type: string

        secrets:
            UPDATE_APPLICATION_VERSION_SCRIPT:
                required: true
            NEWRELIC_API_KEY:
                required: false


name: Deploy to environment

concurrency:
    group: ${{ inputs.host }}-${{ inputs.service_name }}
    cancel-in-progress: true

jobs:
    deploy:
        timeout-minutes: 90
        environment:
            name: ${{ inputs.environment }}
        env:
            HOST: ${{ inputs.host }}
            SERVICE_NAME: ${{ inputs.service_name }}
            URL: ${{ inputs.url }}
            VERSION: ${{ inputs.version }}

        runs-on: ubuntu-latest
        steps:
            -   name: Dump github context
                run: echo "$GITHUB_CONTEXT"
                shell: bash
                env:
                    GITHUB_CONTEXT: ${{ toJson(github) }}

            -   uses: actions/checkout@v3

            -   name: Get currently deployed version
                run: |
                    deployedVersion=$(curl -I --fail --silent ${URL} | grep 'X-App-Version' | awk '{ print $2 }' | sed -e 's/[[:cntrl:]]//') 
                    echo "Deployed version: ${deployedVersion}"

            -   name: Install yq
                run: |
                    sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
                    sudo chmod a+x /usr/local/bin/yq
                    yq --version

            -   name: Setup updateVersion.sh
                run: |
                    echo "${SCRIPT}" > updateVersion.sh
                    chmod +x updateVersion.sh
                    ./updateVersion.sh ${HOST} ${SERVICE_NAME} ${VERSION}
                env:
                    SCRIPT: ${{ secrets.update_application_version_script }}

            -   name: Timestamp
                id: timestamp
                run: |
                    # Create the timestamp and use GitHub variable processing to render it in the next step, otherwise
                    # the single-quotes around the JSON means it won't be interpolated by the shell
                    DATE_NOW=$(date --utc +%FT%TZ)
                    echo "value=${DATE_NOW}" >> $GITHUB_OUTPUT

            -   name: Log NewRelic deployment
                if: inputs.newrelic_application_id != null
                run: |
                    # see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/record-monitor-deployments/
                    
                    # Set variables that will be interpolated by GitHub Actions
                    REVISION="${{ github.sha }}"
                    CHANGELOG="Unspecified"
                    DESCRIPTION="${{ github.event.head_commit.message }}"
                    USER="${{ toJSON(github.actor) || Unknown}}"
                    TIMESTAMP="${{ steps.timestamp.outputs.value }}"
                  
                    # Construct JSON data using jq
                    json_payload=$(jq -n \
                        --arg revision "$REVISION" \
                        --arg changelog "$CHANGELOG" \
                        --arg description "$DESCRIPTION" \
                        --arg user "${USER:-Unknown}" \
                        --arg timestamp "$TIMESTAMP" \
                        '{
                            deployment: {
                              revision: $revision,
                              changelog: $changelog,
                              description: $description,
                              user: $user,
                              timestamp: $timestamp
                            }
                        }'
                    )
                  
                    # Use the JSON payload in the curl command
                    curl -X POST "https://api.newrelic.com/v2/applications/${{ inputs.newrelic_application_id }}/deployments.json" \
                    -H "X-Api-Key:$API_KEY" \
                    -H "Content-Type: application/json" \
                    -i \
                    -d "$json_payload"

                env:
                    API_KEY: ${{ secrets.NEWRELIC_API_KEY }}

            -   name: Wait for deployment
                run: |
                    set +e # don't fail as soon as we get a 503 response
                    
                    # 60 minutes
                    timeout=3600
                    
                    count=0
                    while [ ${count} -lt ${timeout} ]
                    do
                        deployedVersion=$(curl -I --fail --silent ${URL} | grep -i 'X-App-Version' | awk '{ print $2 }' | sed -e 's/[[:cntrl:]]//')
                        if [ "${deployedVersion}" == "${VERSION}" ] || [ "${URL}" == "no_url" ]
                            then
                            echo "${VERSION} deployed successfully at ${URL} in ${SECONDS} seconds"
                            exit 0
                        else
                            echo "Waiting...currently deployed version is '${deployedVersion}'"
                        fi
                        sleep 5
                        count=$((${count} + 5))
                    done
                    
                    echo "Timeout: ${VERSION} has not been deployed @ ${URL} in ${SECONDS} seconds"
                    exit 1
